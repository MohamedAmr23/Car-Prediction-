# importing libraries
# -*- coding: utf-8 -*-
"""carPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i3rLhfit4Yljp9OuehRVVv2nQqOBsk_D
"""

# Commented out IPython magic to ensure Python compatibility.
# importing libraries
import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
import tkinter as tk
from tkinter import ttk
import seaborn as sns
sns.set()
from matplotlib import pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.cluster import KMeans
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score


# %matplotlib inline

# reading data
data=pd.read_csv("data.csv")


# Function to preprocess input data
def dataInfo():
  data.info()
#  return processed_data

# Function to predict car price
def predict_price(data):
    # Predict price using your existing model
    # Replace this with your model prediction code
    predicted_price = 10000  # Placeholder value, replace with actual prediction
    return predicted_price
models = {
    "KNN": KNeighborsRegressor(),
    "Decision Tree": DecisionTreeRegressor(),
    "Random Forest": RandomForestRegressor(),
    "SVM": SVR()
}

# Function to handle prediction button click event
def predict_button_clicked():

    input_data = {
         "Make": make_entry.get(),
        "Model": model_entry.get(),
        "Year": int(year_entry.get()),
        "Engine Fuel Type": engine_fuel_type_entry.get(),
        "Engine HP": float(engine_hp_entry.get()),
        "Engine Cylinders": int(engine_cylinders_entry.get()),
        "Transmission Type": transmission_type_entry.get(),
        "Driven_Wheels": driven_wheels_entry.get(),
        "Number of Doors": int(number_of_doors_entry.get()),
        "Market Category": market_category_entry.get(),
        "Vehicle Size": vehicle_size_entry.get(),
        "Vehicle Style": vehicle_style_entry.get(),
        "highway MPG": int(highway_mpg_entry.get()),
        "city mpg": int(city_mpg_entry.get()),
        "Popularity": int(popularity_entry.get()),
        # Add more input fields as needed
    }
    
    # Preprocess input data
    # processed_data = preprocess_input(input_data)
    
    # Predict car price
    # predicted_price = predict_price(processed_data)
    
    # Show predicted price in a message box
    messagebox.showinfo("Predicted Price", f"The predicted price is: ${predicted_price:.2f}")

# Create GUI window
window = tk.Tk()
window.title("Car Price Prediction")

process_button = ttk.Button(window, text="data information", command=dataInfo)
process_button.grid(row=16, column=0, columnspan=2, pady=10)
# Add input fields
make_label = ttk.Label(window, text="Make:")
make_label.grid(row=0, column=0, padx=10, pady=5, sticky="e")
make_entry = ttk.Entry(window)
make_entry.grid(row=0, column=1, padx=10, pady=5)

model_label = ttk.Label(window, text="Model:")
model_label.grid(row=1, column=0, padx=10, pady=5, sticky="e")
model_entry = ttk.Entry(window)
model_entry.grid(row=1, column=1, padx=10, pady=5)

year_label = ttk.Label(window, text="Year:")
year_label.grid(row=2, column=0, padx=10, pady=5, sticky="e")
year_entry = ttk.Entry(window)
year_entry.grid(row=2, column=1, padx=10, pady=5)

engine_fuel_type_label = ttk.Label(window, text="Engine Fuel Type:")
engine_fuel_type_label.grid(row=3, column=0, padx=10, pady=5, sticky="e")
engine_fuel_type_entry = ttk.Entry(window)
engine_fuel_type_entry.grid(row=3, column=1, padx=10, pady=5)

engine_hp_label =ttk.Label(window, text="EngineHP:")
engine_hp_label.grid(row=4, column=0, padx=10, pady=5, sticky="e")
engine_hp_entry = ttk.Entry(window)
engine_hp_entry.grid(row=4, column=1, padx=10, pady=5)

engine_cylinders_label = ttk.Label(window, text="Engine Cylinders:")
engine_cylinders_label.grid(row=5, column=0, padx=10, pady=5, sticky="e")
engine_cylinders_entry = ttk.Entry(window)
engine_cylinders_entry.grid(row=5, column=1, padx=10, pady=5)

transmission_type_label = ttk.Label(window, text="Transmission Type:")
transmission_type_label.grid(row=6, column=0, padx=10, pady=5, sticky="e")
transmission_type_entry = ttk.Entry(window)
transmission_type_entry.grid(row=6, column=1, padx=10, pady=5)

driven_wheels_label = ttk.Label(window, text="Driven_Wheels:")
driven_wheels_label.grid(row=7, column=0, padx=10, pady=5, sticky="e")
driven_wheels_entry = ttk.Entry(window)
driven_wheels_entry.grid(row=7, column=1, padx=10, pady=5)

number_of_doors_label = ttk.Label(window, text="Number of Doors:")
number_of_doors_label.grid(row=8, column=0, padx=10, pady=5, sticky="e")
number_of_doors_entry = ttk.Entry(window)
number_of_doors_entry.grid(row=8, column=1, padx=10, pady=5)

market_category_label = ttk.Label(window, text="Market Category:")
market_category_label.grid(row=9, column=0, padx=10, pady=5, sticky="e")
market_category_entry = ttk.Entry(window)
market_category_entry.grid(row=9, column=1, padx=10, pady=5)

vehicle_size_label = ttk.Label(window, text="Vehicle Size:")
vehicle_size_label.grid(row=10, column=0, padx=10, pady=5, sticky="e")
vehicle_size_entry = ttk.Entry(window)
vehicle_size_entry.grid(row=10, column=1, padx=10, pady=5)

vehicle_style_label = ttk.Label(window, text="Vehicle Style:")
vehicle_style_label.grid(row=11, column=0, padx=10, pady=5, sticky="e")
vehicle_style_entry = ttk.Entry(window)
vehicle_style_entry.grid(row=11, column=1, padx=10, pady=5)

highway_mpg_label = ttk.Label(window, text="highway MPG:")
highway_mpg_label.grid(row=12, column=0, padx=10, pady=5, sticky="e")
highway_mpg_entry = ttk.Entry(window)
highway_mpg_entry.grid(row=12, column=1, padx=10, pady=5)

city_mpg_label = ttk.Label(window, text="city mpg:")
city_mpg_label.grid(row=13, column=0, padx=10, pady=5, sticky="e")
city_mpg_entry = ttk.Entry(window)
city_mpg_entry.grid(row=13, column=1, padx=10, pady=5)

popularity_label = ttk.Label(window, text="Popularity:")
popularity_label.grid(row=14, column=0, padx=10, pady=5, sticky="e")
popularity_entry = ttk.Entry(window)
popularity_entry.grid(row=14, column=1, padx=10, pady=5)


# Add predict button
predict_button = ttk.Button(window, text="Predict", command=predict_button_clicked)
predict_button.grid(row=15, column=0, columnspan=2, pady=10)

# Start GUI event loop
window.mainloop()
